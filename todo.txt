src Setting.js

original

import { __ } from '@wordpress/i18n';
import { InspectorControls } from '@wordpress/block-editor';
import { PanelBody, __experimentalUnitControl as UnitControl, __experimentalBoxControl as BoxControl } from '@wordpress/components';

import { BColor, Background, ColorsControl, Typography } from './Components'
import { produce } from 'immer';
import { emUnit, pxUnit } from './Components/utils/options';


const Settings = ({ attributes, setAttributes }) => {
	const { tabsPadding, tabColors, tabActiveColors, titleTypo, icon, contentBG } = attributes;
	const { size: iconSize, color, activeColor } = icon;

	return <InspectorControls>
		<PanelBody className='bPlPanelBody' title={__('Tab/Menu', 'stepped-content')}>
			<BoxControl
				label={__("Padding", "tcb")}
				values={tabsPadding}
				resetValues={{
					"top": "0px",
					"right": "0x",
					"bottom": "0px",
					"left": "0px"
				}}
				onChange={(value) => setAttributes({ tabsPadding: value })} />
		</PanelBody>

		<PanelBody className="bPlPanelBody" title={__("Tab", "tcb")} initialOpen={false}>
			<ColorsControl label={__("Colors", "tcb")} value={tabColors} onChange={val => setAttributes({ tabColors: val })} defaults={{ color: '#333', bgType: 'gradient', gradient: 'linear-gradient(to right, #e7f5dd, #f1f9eb, #f8fff1, #e4eedc, #d5e3cb)' }} />

			<ColorsControl label={__("Active Colors", "tcb")} value={tabActiveColors} onChange={val => setAttributes({ tabActiveColors: val })} defaults={{ color: '#333', bgType: 'gradient', gradient: 'linear-gradient(to right, #019447, #f1f9eb, #10d56d, #e4eedc, #dbeccd)' }} />

			<Typography
				label={__("Title Typography", "tcb")}
				value={titleTypo}
				onChange={(val) => setAttributes({ titleTypo: val })}
				produce={produce}
			/>

			<UnitControl label={__("Icon Size", "tcb")} labelPosition='left' value={iconSize} onChange={val => setAttributes({ icon: { ...icon, size: val } })} units={[pxUnit(), emUnit()]} />

			<BColor label={__("Icon Color", "tcb")} value={color} onChange={val => setAttributes({ icon: { ...icon, color: val } })} />
			<BColor label={__("Icon Active Color", "tcb")} value={activeColor} onChange={val => setAttributes({ icon: { ...icon, activeColor: val } })} />
		</PanelBody>


		<PanelBody className='bPlPanelBody' title={__('Cotnent', 'stepped-content')} initialOpen={false}>
			<Background
				label={__("Background", "tcb")}
				value={contentBG}
				onChange={(val) =>
					setAttributes({ contentBG: val })
				}
			/>
		</PanelBody>
	</InspectorControls>;
};
export default Settings;

end////////

tab > Settings.js//////////

import { __ } from '@wordpress/i18n';
import { InspectorControls } from '@wordpress/block-editor';
import { PanelBody, TextControl } from '@wordpress/components';
import { Label, IconControl } from '../Components';


const Settings = ({ attributes, setAttributes }) => {
  const { title, icon } = attributes;

  return (
    <InspectorControls>
      <PanelBody className='bPlPanelBody' title={__('Tabbed Content', 'stepped-content')}>
        <Label className='mb5'>{__('Title:', 'tcb')}</Label>
        <TextControl value={title} onChange={val => setAttributes({ title: val })} />
        <IconControl className='mt20' value={icon} onChange={val => { setAttributes({ icon: val }) }} isSize={false} />
      </PanelBody>
    </InspectorControls>
  );
};

export default Settings;

end//

tab > Edit.js///

import { useEffect } from 'react';
import { InnerBlocks } from '@wordpress/block-editor';

import Settings from './Settings';

////////  Tap Manue  ///////////////////////

const Edit = props => {
	const { attributes, setAttributes, clientId } = props;

	useEffect(() => { clientId && setAttributes({ cId: clientId.substring(0, 10) }); }, [clientId]); // Set & Update clientId to cId

	return <>
		<Settings attributes={attributes} setAttributes={setAttributes} />

		<div className='wp-block-tcb-tab' id={`tcbTabbedContentTab-${clientId}`}>
			<InnerBlocks template={[
				['core/heading', {
					content: `Section 1.10.32 of "de Finibus Bonorum et Malorum", written by Cicero in 45 BC
					"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est,
					 qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"`,
					style: {
						typography: { fontSize: '15px' }
					}
				}]
			]} />
		</div>
	</>;
};
export default Edit;

end////////

Utils > function.js



const addClass = (el, cl) => el?.classList.add(cl);
const remClass = (el, cl) => el?.classList.remove(cl);

export const getBoxValue = object => Object.values(object).join(' ');

const getIndex = el => Array.from(el?.parentElement?.children || [])?.indexOf(el);

let timerOpacity;

export const tabInit = (el, clientId) => {
    const listEls = document.querySelectorAll(`#tcbTabbedContent-${clientId} .tabMenu > li`);
    const bodyEls = document.querySelectorAll(`#tcbTabbedContent-${clientId} .wp-block-tcb-tab`);

    // Clear Timer
    window.clearTimeout(timerOpacity);

    // Remove Active Classes
    listEls.forEach(el => {
        remClass(el, 'active');
    });
    bodyEls.forEach(bodyEl => {
        remClass(bodyEl, 'active');
        remClass(bodyEl, 'activeContent');
    });

    // Add Active Classes
    addClass(el, 'active');

    const bodyEl = bodyEls[getIndex(el)];
    addClass(bodyEl, 'active');

    // Opacity Transition Class
    timerOpacity = setTimeout(() => {
        // console.log(bodyEl)
        addClass(bodyEl, 'activeContent');
    }, 50);
}
 end/////////

 src > Edit.js 


 import { useEffect, useState } from 'react';
import { __ } from '@wordpress/i18n'
import { withDispatch, withSelect } from '@wordpress/data';
import { compose } from '@wordpress/compose'
import { BlockControls, InnerBlocks, Inserter, RichText } from '@wordpress/block-editor';
import './editor.scss';
import { tabInit, getBoxValue } from './utils/function';
import { IconButton, ToolbarItem, Toolbar, Button, Dropdown } from '@wordpress/components';
import { getBackgroundCSS, getColorsCSS, getIconCSS, getTypoCSS } from './Components/utils/getCSS';
import Settings from './Settings';
import { IconControl } from './Components';



const INNER_BLOCKS_TEMPLATE = [
	['tcb/tab', { title: 'HTML5 Audio Player', mediaType: 'icon', iconClass: 'fab fa-html5' }],
	['tcb/tab', { title: 'HTML5 Video Player', mediaType: 'icon', iconClass: 'fab fa-html5' }],
	['tcb/tab', { title: 'HTML5 Video Player', mediaType: 'icon', iconClass: 'fab fa-html5' }]
];


const Edit = props => {
	const { attributes, setAttributes, clientId, innerBlocks, getBlock, getBlockAttributes, updateBlockAttributes, removeBlock } = props;
	const { tabColors, tabActiveColors, icon, tabsPadding, titleTypo, tabs, contentBG } = attributes;


	const [firstClientId, setFirstClientId] = useState(null)
	const [isOpen, setIsOpen] = useState(false);
	const [activeClientId, setActiveClientId] = useState(false);
	const [titleValue, setTitleValue] = useState({});
	const [iconValue, setIconValue] = useState({});
	const [tabAttribute, setTabAttribute] = useState({})


	const toggleDropdown = () => {
		setIsOpen(!isOpen);
	};


	useEffect(() => { clientId && setAttributes({ cId: clientId.substring(0, 10) }); }, [clientId]); // Set & Update clientId to cId

	useEffect(() => {
		const newTabs = innerBlocks?.map(({ clientId, attributes: { title, mediaType, icon } }, index) => {
			if (index === 0) {
				setFirstClientId(clientId)
			}
			return { clientId, title, mediaType, icon };
		});

		setAttributes({ tabs: newTabs });
	}, [innerBlocks]);

	useEffect(() => {
		const listEls = document.querySelectorAll(`#tcbTabbedContent-${clientId} .tabMenu > li`);

		listEls[0] && tabInit(listEls[0], clientId);
	}, [])

	useEffect(() => {
		tabInit(document.querySelector(`#tcbTabbedContent-${clientId} .tabMenu > li`), clientId)
	}, [firstClientId]);

	useEffect(() => {
		const block = getBlock(activeClientId);
		setTabAttribute(block?.attributes)
		setTitleValue(block?.attributes?.title || {})
		setIconValue(block?.attributes?.icon || {})
	}, [activeClientId])


	useEffect(() => {
		const newAttributes = { ...tabAttribute };
		newAttributes.icon = iconValue;
		updateBlockAttributes(activeClientId, newAttributes)
	}, [iconValue])

	useEffect(() => {
		const newAttributes = { ...tabAttribute };
		newAttributes.title = titleValue;
		updateBlockAttributes(activeClientId, newAttributes)
	}, [titleValue]);

	return <div className='wp-block-tcb-tabs' id={`tcbTabbedContent-${clientId}`}>
		<style>{`
			${getTypoCSS(``, titleTypo)?.googleFontLink}
			${getTypoCSS(`#tcbTabbedContent-${clientId} li .tabLabel`, titleTypo)?.styles}

			#tcbTabbedContent-${clientId} .tabMenu {
				padding: ${getBoxValue(tabsPadding)}
			}
			#tcbTabbedContent-${clientId} .tabMenu li{
				${getColorsCSS(tabColors)}
			}
			#tcbTabbedContent-${clientId} .tabMenu li.active{
				${getColorsCSS(tabActiveColors)}
			}
			.tcbTabbedContent-${clientId} .tabMenu li .menuIcon i {
				font-size:${icon.size};
				color:${icon.color}
			}
			.tcbTabbedContent-${clientId} .tabMenu li.active .menuIcon i {
				color:${icon.activeColor}
			}
	
			.tcbTabbedContent-${clientId} .tabContent{
				${getBackgroundCSS(contentBG)}
			}
	    `}</style>

		{/* Icon Single Color Controll */}
		<BlockControls>
			<Toolbar label="Options">
				<Dropdown
					popoverProps={{ placement: 'bottom-start' }}
					contentClassName="tcbTabContentPopover"
					renderToggle={({ onToggle }) => {
						return <ToolbarItem icon="edit" as={Button} onClick={onToggle}></ToolbarItem>
					}}
					renderContent={() => {
						return <IconControl className='mt20' value={iconValue} onChange={val => {
							setIconValue(val)
						}} isSize={false} />
					}}
					isOpen={isOpen}
					onClose={toggleDropdown}
				/>
			</Toolbar>
		</BlockControls>

		<Settings attributes={attributes} setAttributes={setAttributes}></Settings>

		<div id={`tcbTabbedContent-${clientId}`} className={`tcbTabbedContent tcbTabbedContent-${clientId}`}>
			<ul className="tabMenu">
				{tabs.map((tab, index) => <Tab key={index} getBlockAttributes={getBlockAttributes} updateBlockAttributes={updateBlockAttributes} removeBlock={removeBlock} clientId={clientId} setActiveClientId={setActiveClientId} tab={tab} index={index} />)}
			</ul>

			<div className='tabContent'>
				<InnerBlocks allowedBlocks={['b-temp/tab']} template={INNER_BLOCKS_TEMPLATE} renderAppender={() =>
					<Inserter rootClientId={clientId}
						isAppender
						renderToggle={({ onToggle, disabled }) => <IconButton
							className='bTempAddTab'
							onClick={onToggle}
							disabled={disabled}
							label={__('Add New Tab', 'b-temp')}
							icon='plus-alt' >
							{__('Add New Tab', 'b-temp')}  </IconButton>}
					/>
				} />
			</div>
		</div>
	</div>;
};

const Tab = ({ getBlockAttributes, updateBlockAttributes, removeBlock, clientId, setActiveClientId, tab, index }) => {
	const { clientId: childId, title, icon } = tab;

	const [childAttr, setChildAttr] = useState({});
	const [titleValue, setTitleValue] = useState(title);

	useEffect(() => {
		setChildAttr(getBlockAttributes(childId));
	}, [childId]);

	useEffect(() => {
		const newAttr = { ...childAttr };
		newAttr.title = titleValue;
		updateBlockAttributes(childId, newAttr)
	}, [titleValue, childAttr]);

	const onListClick = e => {
		e.preventDefault();
		tabInit(e.currentTarget, clientId);
		setActiveClientId(childId);
	}

	return <li key={index} onClick={onListClick} className={index === 0 ? "active" : ""} id={`menuItem-${childId}`}>
		<style>
			{`#tcbTabbedContent-${clientId} .tabMenu #menuItem-${childId} .menuIcon i{
				${(icon?.color || icon?.gradient) && getIconCSS(icon, false)}
			}`}
		</style>

		<i onClick={(e) => {
			e.preventDefault();
			e.stopPropagation();

			removeBlock(childId);

			const liEl = e.target.parentElement;
			const isActive = liEl.classList.contains('active');

			if (isActive) {
				const nextEl = liEl.nextSibling;
				const prevEl = liEl.previousSibling;

				if (prevEl) {
					setTimeout(() => {
						tabInit(prevEl, clientId);
					}, 0);
				} else if (nextEl) {
					setTimeout(() => {
						tabInit(nextEl, clientId);
					}, 0);
				}
			}
		}} className="fa-solid fa-xmark" ></i>

		{icon?.class ? <span className='menuIcon'> <i className={icon?.class}></i> </span> : ""}

		<span className="tabLabel">
			<RichText
				tagName="p"
				value={titleValue}
				onChange={(content) => setTitleValue(content)}
				placeholder={__("Enter Title", 'tcb-block-title')}
				inlineToolbar
				allowedFormats={["core/bold", "core/italic"]}
			/>
		</span>
	</li>
}


export default compose([
	withSelect((select, { clientId }) => {
		const { getBlocks, getBlock, getBlockAttributes } = select('core/block-editor');

		return {
			innerBlocks: getBlocks(clientId),
			getBlock,
			getBlockAttributes,
		};
	}),
	withDispatch(dispatch => {
		const { updateBlockAttributes } = dispatch('core/block-editor');
		const { removeBlock } = dispatch('core/editor');

		return { updateBlockAttributes, removeBlock }
	})
])(Edit)